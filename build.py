"""
Build helper functions for Labtronyx
"""
__author__ = 'kkennedy'

# -----------------------------------------------------------------------
# BUILD VERSION
# -----------------------------------------------------------------------

# Version (Semantic Versioning)
VER_MAJOR = 0
VER_MINOR = 1
VER_PATCH = 0

# Is this a release version? If so, additional data is appended to full version
RELEASE = False

# Release type
REL_TYPE = 'dev'    # Development Release
# REL_TYPE = 'alpha.1' # Alpha Release
# REL_TYPE = 'beta.1'  # Beta Release
# REL_TYPE = 'rc.1'    # Release Candidate

# -----------------------------------------------------------------------
# DO NOT CHANGE ANYTHING BELOW THIS LINE
# -----------------------------------------------------------------------

import os, time

rootPath = os.path.dirname(os.path.realpath(os.path.join(__file__, os.curdir))) # Resolves symbolic links

def generate_ver(filename='testronyx/version.py'):
    print "Generating version file: %s" % filename

    # Get Git Revision
    try:
        import subprocess
        GIT_REVISION = subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip()
    except:
        GIT_REVISION = ''

    # Generate version string
    VERSION = '%d.%d.%d' % (VER_MAJOR, VER_MINOR, VER_PATCH)
    BUILD_DATE = time.strftime("%y%m%d")

    if not RELEASE:
        # Pre-release build
        if GIT_REVISION != '':
            FULL_VERSION = '%s-%s+commit.%s' % (VERSION, REL_TYPE, GIT_REVISION[:7])
        else:
            FULL_VERSION = '%s-%s+build.%s' % (VERSION, REL_TYPE, BUILD_DATE)
    else:
        # Release build
        FULL_VERSION = VERSION

    # Generate version file
    ver_py = """# AUTOGENERATED DURING BUILD

ver_sem = '{version}'
ver_full = '{full_version}'
build_date = '{build}'
git_revision = '{git_revision}'
    """
    with open(os.path.join(rootPath, filename), 'w') as f:
        f.write(ver_py.format(version=VERSION, full_version=FULL_VERSION,
                              build=BUILD_DATE, git_revision=GIT_REVISION))

    return VERSION, FULL_VERSION

def build_all():
    print "Running build..."

    try:
        generate_ver()

        print "Build completed!"

    except:
        print "Build failed!"
        raise

if __name__ == '__main__':
    build_all()